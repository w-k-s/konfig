// Code generated by MockGen. DO NOT EDIT.
// Source: ./loader/klvault/vaultloader.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	api "github.com/hashicorp/vault/api"
)

// MockLogicalClient is a mock of LogicalClient interface.
type MockLogicalClient struct {
	ctrl     *gomock.Controller
	recorder *MockLogicalClientMockRecorder
}

// MockLogicalClientMockRecorder is the mock recorder for MockLogicalClient.
type MockLogicalClientMockRecorder struct {
	mock *MockLogicalClient
}

// NewMockLogicalClient creates a new mock instance.
func NewMockLogicalClient(ctrl *gomock.Controller) *MockLogicalClient {
	mock := &MockLogicalClient{ctrl: ctrl}
	mock.recorder = &MockLogicalClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLogicalClient) EXPECT() *MockLogicalClientMockRecorder {
	return m.recorder
}

// Read mocks base method.
func (m *MockLogicalClient) Read(key string) (*api.Secret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", key)
	ret0, _ := ret[0].(*api.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockLogicalClientMockRecorder) Read(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockLogicalClient)(nil).Read), key)
}

// ReadWithData mocks base method.
func (m *MockLogicalClient) ReadWithData(key string, data map[string][]string) (*api.Secret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadWithData", key, data)
	ret0, _ := ret[0].(*api.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadWithData indicates an expected call of ReadWithData.
func (mr *MockLogicalClientMockRecorder) ReadWithData(key, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadWithData", reflect.TypeOf((*MockLogicalClient)(nil).ReadWithData), key, data)
}

// Write mocks base method.
func (m *MockLogicalClient) Write(key string, data map[string]interface{}) (*api.Secret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", key, data)
	ret0, _ := ret[0].(*api.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Write indicates an expected call of Write.
func (mr *MockLogicalClientMockRecorder) Write(key, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockLogicalClient)(nil).Write), key, data)
}
